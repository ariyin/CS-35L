chorus-lapilli.txt


Setup
1. Install Node.js
2. In the CodeSandbox tab (https://codesandbox.io/s/7thh9p?file=%2FApp.js&utm_medium=sandpac) press the top-left corner button to open the menu, and then choose File > Export to ZIP in that menu to download an archive of the files locally
3. Unzip the archive, then open a terminal and cd to the directory thatâ€™s unzipped
4. Install the dependencies with `npm install`
5. Run `npm start` to start a local server and follow the prompts to view the code running in a browser
6. The basic code for Tic-Tac-Toe will be the starting point for our Chorus Lapilli game
    1. If there is confusion surrounding how the code works, please read tic-tac-toe.txt for further explanation


Game Logic
1. Pass in currentMove to the Board function to keep track of how many moves have taken place in the game so far
    1. function Board({ xIsNext, squares, onPlay, currentMove })
    2. <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} currentMove={currentMove + 1}/>
2. Most of the changes to be made to the game logic will be done in an if(currentMove > 6) block within function handleClick(i) since thatâ€™s when the rules start differing from Tic-Tac-Toe
    1. To start, first determine which piece the user is playing as:
        1. const currentPiece = xIsNext ? 'X' : 'O';
    2. Control which squares the user can choose by returning if:
        1. The user has a piece in the center and it is not clicked
            1. if(squares[4] != null && currentPiece == squares[4] && i != 4)
        2. There isnâ€™t a piece in the center and a piece that isnâ€™t the userâ€™s is clicked
            1. else if(currentPiece != squares[4] && squares[i] != currentPiece)
        3. Change the very first if statement so users can click on a square that already contains a piece as long as they have three pieces on the board
            â€‹if (calculateWinner(squares) || (squares[i] && currentMove < 6)) {
                return;
            }
        4. For the main movement, when the user has clicked a square they are allowed to click, move the piece, clear the previous square, and reset the selected square
            1. To set this up, create the states selectedSquare and setSelectedSquare in Board
                1. const [selectedSquare, setSelectedSquare] = useState(null);
            2. Implement the rest of the code
                else if (selectedSquare === null)
                {
                    setSelectedSquare(i);
                }

                else
                {
                    const nextSquares = squares.slice();
                    nextSquares[selectedSquare] = null;
                    nextSquares[i] = currentPiece;
                    onPlay(nextSquares);
                    setSelectedSquare(null);
                }
    3. Edit the recently implemented if statements that return so they take into account whether or not a square has already been selected or not
    4. Add another else if statement that returns if the user selects a square that isnâ€™t valid (aka itâ€™s not one of the empty surrounding squares)
        else if(selectedSquare != null && !isValidMove(selectedSquare, i, squares))
        {
            return;
        }
        1. Create an isValidMove function below all the existing code that checks if the square doesnâ€™t have anything inside it and that it surrounds the original clicked square
    5. Add an else if statement for when the user wants to unselect a square
        1. Place this above the block of code that checks if the user has selected a valid square after already selecting a square so the square can be successfully unselected
        else if(selectedSquare != null && i == selectedSquare)
        {
            setSelectedSquare(null);
        }
    6. Wrap the bottom code handleClick(i) in an else statement so that after executing the above code, the bottom code doesnâ€™t get read
        1. Add a line so that if a player has selected a square but wants to skip to a different move before moving squares is allowed, selectedSquare gets reset 
3. The logic is all done, but to make it easier for the user to know when theyâ€™ve selected a square, CSS can be used to outline the selected square

Simplifying the History
1. Leaving the user the option to skip to different moves introduces the complexity of resetting selectedSquare if the user decides to jump back or jump forward in time
2. To get rid of this conundrum, leave the user with no other options except to jump to the very start of the game
3. Remove the const moves = history.map((squares, move) => {});  block and replace the jumpTo(nextMove) function with a jumpToStart() function
4. Finally, instead of mapping the different moves, simply have one button that allows the user to jump to the start
    1. <button onClick={jumpToStart}> Reset Game </button>

Bonus CSS
1. Add an isSelected prop Square function to keep track of if the Square has been selected
    1. function Square({ value, onSquareClick, isSelected })
2. Change the className of the Square depending on whether it has been selected or not
    1. const classNames = `square ${isSelected ? 'selected-square' : ''}`;
    2. <button className={classNames} onClick={onSquareClick}>
3. Add the isSelected prop to every Square and adjust the value as needed
    1. Square value={squares[0]} onSquareClick={() => handleClick(0)} isSelected={selectedSquare == 0} />
4. Go into the styles.css file and create a class selected-square
5. Copy and paste the CSS for the square class but change it so the border is thicker and red when the square is selected
    1. border: 2px solid #ff0000;
6. Now when a square is selected, the border should be thicker and red, letting the user know if they have successfully selected a square


npm pack --dry-run
Note: This dry-run was made before I packed the code. Some sizes may be different due to making some changes after packing it. 

npm notice 
npm notice ðŸ“¦  vy6j3f@0.0.0
npm notice === Tarball Contents === 
npm notice 512B   .vscode/launch.json       
npm notice 92.9kB README.md                 
npm notice 6.3kB  chorus-lapilli.txt        
npm notice 625B   package.json              
npm notice 24.8kB public/favicon.ico        
npm notice 1.4kB  public/index.html         
npm notice 298B   public/manifest.json      
npm notice 5.9kB  src/App.js                
npm notice 2.3kB  src/createServiceWorker.js
npm notice 256B   src/index.js              
npm notice 157B   src/package.json          
npm notice 234B   src/public/index.html     
npm notice 1.2kB  src/styles.css            
npm notice 12.1kB tic-tac-toe.txt           
npm notice === Tarball Details === 
npm notice name:          vy6j3f                                  
npm notice version:       0.0.0                                   
npm notice filename:      vy6j3f-0.0.0.tgz                        
npm notice package size:  45.4 kB                                 
npm notice unpacked size: 149.1 kB                                
npm notice shasum:        d37896f9c6c84faa952a41fe543b1b75d0ed3f19
npm notice integrity:     sha512-yZzI8CIwFz3RC[...]TPEk/W20CDHCw==
npm notice total files:   14                                      
npm notice 
vy6j3f-0.0.0.tgz